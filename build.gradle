import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    ext {
        springBootVersion = "2.2.5.RELEASE"
        springCloudVersion = "Hoxton.SR1"
        springKafkaVersion = "2.4.3.RELEASE"
        reactorKafaVersion = "1.2.2.RELEASE"
        mapStructVersion = "1.2.0.Final"
        lombokVersion = "1.18.10"
        hibernateValidatorVersion = "6.1.0.Final"
        sourceCompatibilityVersion = "11"
        artifactVersion = "0.0.1-SNAPSHOT"
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

subprojects {
    apply plugin: "groovy"
    apply plugin: "io.spring.dependency-management"

    group = "com.rmamedov.deasy"
    version = "${artifactVersion}"
    sourceCompatibility = "${sourceCompatibilityVersion}"

    repositories {
        mavenCentral()
    }
    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }
    test {
        useJUnitPlatform()
    }
}

project("model-order-lib") {
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        implementation "org.mapstruct:mapstruct-jdk8:${mapStructVersion}"
        compileOnly "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    }
}

project("kafka-starter") {
    dependencies {
        implementation project(":model-order-lib")
        implementation "org.springframework.kafka:spring-kafka:${springKafkaVersion}"
        implementation "io.projectreactor.kafka:reactor-kafka:${reactorKafaVersion}"
    }
}

project("order-service") {
    dependencies {
        implementation project(":model-order-lib")
        implementation project(":kafka-starter")
        //implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
        implementation "io.projectreactor.kafka:reactor-kafka:${reactorKafaVersion}"
        implementation "org.springframework.kafka:spring-kafka:${springKafkaVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        implementation "org.mapstruct:mapstruct-jdk8:${mapStructVersion}"
        compileOnly "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        testImplementation "org.apache.commons:commons-lang3:3.9"
        testImplementation "io.projectreactor:reactor-test"
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }
}

project("address-service") {
    dependencies {
        implementation project(":model-order-lib")
        implementation project(":kafka-starter")
        //implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
        implementation "io.projectreactor.kafka:reactor-kafka:${reactorKafaVersion}"
        testImplementation "org.apache.commons:commons-lang3:3.9"
        testImplementation "io.projectreactor:reactor-test"
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }
}

project("restoraunt-service") {
    dependencies {
        implementation project(":model-order-lib")
        implementation project(":kafka-starter")
        //implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
        implementation "io.projectreactor.kafka:reactor-kafka:${reactorKafaVersion}"
        testImplementation "org.apache.commons:commons-lang3:3.9"
        testImplementation "io.projectreactor:reactor-test"
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }
}

project("courier-service") {

}

project("payment-service") {

}

project("discovery-service") {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    }
}

project("getway-service") {
    dependencies {
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    }
}
